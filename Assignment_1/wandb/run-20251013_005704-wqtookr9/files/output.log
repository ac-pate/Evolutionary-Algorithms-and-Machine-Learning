Wandb tracking initialized: https://wandb.ai/rna-folding-ea-ml/rna-folding-evolutionary-algorithms/runs/wqtookr9
Project: rna-folding-evolutionary-algorithms
Group: nyquist_adaptive
Experiment log: results/2025-10-13_00-57-04_nyquist_nyquist_adaptive_search_run001/experiment_log.txt

============================================================
Running Problem 1.1
Structure: ((((....))))....(((((.......)))))............(((((...
Sequence:  GARMUWYMNKKSSGMUCCKCYAGCNCMMNGAGKNCWAUKSKRUNCGNMYC...
============================================================
Enhanced progress monitoring enabled
Wandb callback registered for problem 1.1
Starting evolution: 200 individuals, 150 generations
Sequence constraint length: 78
Structure constraint: ((((....))))....(((((.......)))))............(((((...
EA Progress Monitoring Started
==================================================
Initializing population...
Initialized population with 200 individuals
Gen   1/150 (  0.7%) | Best: 0.5769, Avg: 0.3649, Diversity: 0.3301 | Time: 0.1min, ETA: calculating...
Gen   2/150 (  1.3%) | Best: 0.7179, Avg: 0.4133, Diversity: 0.3256 | Time: 0.3min, ETA: 23.0min
Gen   3/150 (  2.0%) | Best: 0.7179, Avg: 0.4603, Diversity: 0.3187 | Time: 0.5min, ETA: 22.2min
Gen   4/150 (  2.7%) | Best: 0.7179, Avg: 0.4824, Diversity: 0.3111 | Time: 0.6min, ETA: 21.5min
Gen   5/150 (  3.3%) | Best: 0.7179, Avg: 0.5088, Diversity: 0.3026 | Time: 0.7min, ETA: 20.8min
Gen   6/150 (  4.0%) | Best: 0.7436, Avg: 0.5219, Diversity: 0.2889 | Time: 0.8min, ETA: 20.3min
Gen   7/150 (  4.7%) | Best: 0.7436, Avg: 0.5547, Diversity: 0.2800 | Time: 1.0min, ETA: 19.7min
Gen   8/150 (  5.3%) | Best: 0.7436, Avg: 0.5715, Diversity: 0.2738 | Time: 1.1min, ETA: 19.3min
Gen   9/150 (  6.0%) | Best: 0.8205, Avg: 0.5684, Diversity: 0.2627 | Time: 1.2min, ETA: 19.2min
Gen  10/150 (  6.7%) | Best: 0.8205, Avg: 0.5756, Diversity: 0.2449 | Time: 1.4min, ETA: 19.0min
Gen  11/150 (  7.3%) | Best: 0.8462, Avg: 0.5890, Diversity: 0.2245 | Time: 1.5min, ETA: 19.0min
Gen  12/150 (  8.0%) | Best: 0.8462, Avg: 0.6301, Diversity: 0.2055 | Time: 1.7min, ETA: 19.0min
Gen  13/150 (  8.7%) | Best: 0.8462, Avg: 0.6487, Diversity: 0.1904 | Time: 1.8min, ETA: 19.0min
Gen  14/150 (  9.3%) | Best: 0.8974, Avg: 0.6890, Diversity: 0.1603 | Time: 2.0min, ETA: 19.1min
Gen  15/150 ( 10.0%) | Best: 0.8974, Avg: 0.7301, Diversity: 0.1260 | Time: 2.1min, ETA: 19.1min
Gen  16/150 ( 10.7%) | Best: 0.8974, Avg: 0.7474, Diversity: 0.1128 | Time: 2.3min, ETA: 19.1min
Gen  17/150 ( 11.3%) | Best: 0.8974, Avg: 0.7533, Diversity: 0.1077 | Time: 2.4min, ETA: 19.1min
Gen  18/150 ( 12.0%) | Best: 0.8974, Avg: 0.7616, Diversity: 0.1210 | Time: 2.6min, ETA: 18.9min
Gen  19/150 ( 12.7%) | Best: 0.8974, Avg: 0.7617, Diversity: 0.1218 | Time: 2.7min, ETA: 18.8min
Gen  20/150 ( 13.3%) | Best: 0.8974, Avg: 0.7694, Diversity: 0.1220 | Time: 2.9min, ETA: 18.8min
Gen  21/150 ( 14.0%) | Best: 0.8974, Avg: 0.7819, Diversity: 0.1264 | Time: 3.0min, ETA: 18.7min
Gen  22/150 ( 14.7%) | Best: 0.8974, Avg: 0.7768, Diversity: 0.1312 | Time: 3.2min, ETA: 18.6min
Gen  23/150 ( 15.3%) | Best: 0.8974, Avg: 0.7597, Diversity: 0.1388 | Time: 3.3min, ETA: 18.5min
Gen  24/150 ( 16.0%) | Best: 1.0000, Avg: 0.7749, Diversity: 0.1453 | Time: 3.5min, ETA: 18.3min
Milestone: First high-quality solution (fitness > 0.9) at generation 24!
Excellent: Near-perfect solution (fitness > 0.95) at generation 24!
Gen  25/150 ( 16.7%) | Best: 1.0000, Avg: 0.7608, Diversity: 0.1433 | Time: 3.6min, ETA: 18.2min
Gen  26/150 ( 17.3%) | Best: 1.0000, Avg: 0.7540, Diversity: 0.1396 | Time: 3.8min, ETA: 18.1min
Gen  27/150 ( 18.0%) | Best: 1.0000, Avg: 0.7622, Diversity: 0.1398 | Time: 4.0min, ETA: 18.0min
Gen  28/150 ( 18.7%) | Best: 1.0000, Avg: 0.7758, Diversity: 0.1424 | Time: 4.1min, ETA: 17.9min
Gen  29/150 ( 19.3%) | Best: 1.0000, Avg: 0.8081, Diversity: 0.1371 | Time: 4.3min, ETA: 17.8min
Gen  30/150 ( 20.0%) | Best: 1.0000, Avg: 0.8247, Diversity: 0.1143 | Time: 4.4min, ETA: 17.7min
Gen  31/150 ( 20.7%) | Best: 1.0000, Avg: 0.8365, Diversity: 0.0916 | Time: 4.6min, ETA: 17.6min
Gen  32/150 ( 21.3%) | Best: 1.0000, Avg: 0.8763, Diversity: 0.0742 | Time: 4.7min, ETA: 17.5min
Gen  33/150 ( 22.0%) | Best: 1.0000, Avg: 0.8819, Diversity: 0.0703 | Time: 4.9min, ETA: 17.3min
Gen  34/150 ( 22.7%) | Best: 1.0000, Avg: 0.8944, Diversity: 0.0722 | Time: 5.0min, ETA: 17.2min
Gen  35/150 ( 23.3%) | Best: 1.0000, Avg: 0.8996, Diversity: 0.0729 | Time: 5.2min, ETA: 17.1min
Gen  36/150 ( 24.0%) | Best: 1.0000, Avg: 0.8807, Diversity: 0.0721 | Time: 5.4min, ETA: 17.0min
Gen  37/150 ( 24.7%) | Best: 1.0000, Avg: 0.8920, Diversity: 0.0680 | Time: 5.5min, ETA: 16.8min
Gen  38/150 ( 25.3%) | Best: 1.0000, Avg: 0.8898, Diversity: 0.0696 | Time: 5.7min, ETA: 16.7min
Gen  39/150 ( 26.0%) | Best: 1.0000, Avg: 0.8837, Diversity: 0.0782 | Time: 5.8min, ETA: 16.6min
Gen  40/150 ( 26.7%) | Best: 1.0000, Avg: 0.8675, Diversity: 0.0778 | Time: 6.0min, ETA: 16.4min
Gen  41/150 ( 27.3%) | Best: 1.0000, Avg: 0.8978, Diversity: 0.0751 | Time: 6.1min, ETA: 16.3min
Gen  42/150 ( 28.0%) | Best: 1.0000, Avg: 0.8756, Diversity: 0.0726 | Time: 6.3min, ETA: 16.2min
Gen  43/150 ( 28.7%) | Best: 1.0000, Avg: 0.8937, Diversity: 0.0722 | Time: 6.4min, ETA: 16.0min
Gen  44/150 ( 29.3%) | Best: 1.0000, Avg: 0.8728, Diversity: 0.0784 | Time: 6.6min, ETA: 15.9min
Gen  45/150 ( 30.0%) | Best: 1.0000, Avg: 0.8978, Diversity: 0.0790 | Time: 6.8min, ETA: 15.8min
Gen  46/150 ( 30.7%) | Best: 1.0000, Avg: 0.8833, Diversity: 0.0801 | Time: 6.9min, ETA: 15.6min
Gen  47/150 ( 31.3%) | Best: 1.0000, Avg: 0.8803, Diversity: 0.0790 | Time: 7.1min, ETA: 15.5min
Gen  48/150 ( 32.0%) | Best: 1.0000, Avg: 0.9033, Diversity: 0.0763 | Time: 7.2min, ETA: 15.4min
Gen  49/150 ( 32.7%) | Best: 1.0000, Avg: 0.8724, Diversity: 0.0819 | Time: 7.4min, ETA: 15.2min
Gen  50/150 ( 33.3%) | Best: 1.0000, Avg: 0.8884, Diversity: 0.0811 | Time: 7.5min, ETA: 15.1min
Gen  51/150 ( 34.0%) | Best: 1.0000, Avg: 0.8838, Diversity: 0.0712 | Time: 7.7min, ETA: 14.9min
Gen  52/150 ( 34.7%) | Best: 1.0000, Avg: 0.8912, Diversity: 0.0713 | Time: 7.8min, ETA: 14.8min
Gen  53/150 ( 35.3%) | Best: 1.0000, Avg: 0.8698, Diversity: 0.0692 | Time: 8.0min, ETA: 14.6min
Gen  54/150 ( 36.0%) | Best: 1.0000, Avg: 0.8810, Diversity: 0.0712 | Time: 8.1min, ETA: 14.5min
Gen  55/150 ( 36.7%) | Best: 1.0000, Avg: 0.8759, Diversity: 0.0743 | Time: 8.3min, ETA: 14.3min
Gen  56/150 ( 37.3%) | Best: 1.0000, Avg: 0.8759, Diversity: 0.0744 | Time: 8.4min, ETA: 14.2min
Gen  57/150 ( 38.0%) | Best: 1.0000, Avg: 0.8903, Diversity: 0.0747 | Time: 8.6min, ETA: 14.0min
Gen  58/150 ( 38.7%) | Best: 1.0000, Avg: 0.8735, Diversity: 0.0751 | Time: 8.7min, ETA: 13.9min
Gen  59/150 ( 39.3%) | Best: 1.0000, Avg: 0.8993, Diversity: 0.0726 | Time: 8.9min, ETA: 13.7min
Gen  60/150 ( 40.0%) | Best: 1.0000, Avg: 0.8694, Diversity: 0.0738 | Time: 9.0min, ETA: 13.6min
Gen  61/150 ( 40.7%) | Best: 1.0000, Avg: 0.8881, Diversity: 0.0718 | Time: 9.2min, ETA: 13.4min
Gen  62/150 ( 41.3%) | Best: 1.0000, Avg: 0.8733, Diversity: 0.0758 | Time: 9.3min, ETA: 13.3min
Gen  63/150 ( 42.0%) | Best: 1.0000, Avg: 0.8794, Diversity: 0.0765 | Time: 9.5min, ETA: 13.1min
Gen  64/150 ( 42.7%) | Best: 1.0000, Avg: 0.8841, Diversity: 0.0800 | Time: 9.7min, ETA: 13.0min
Gen  65/150 ( 43.3%) | Best: 1.0000, Avg: 0.8786, Diversity: 0.0792 | Time: 9.8min, ETA: 12.8min
Gen  66/150 ( 44.0%) | Best: 1.0000, Avg: 0.8787, Diversity: 0.0765 | Time: 10.0min, ETA: 12.7min
Gen  67/150 ( 44.7%) | Best: 1.0000, Avg: 0.8936, Diversity: 0.0756 | Time: 10.1min, ETA: 12.5min
Gen  68/150 ( 45.3%) | Best: 1.0000, Avg: 0.8825, Diversity: 0.0778 | Time: 10.3min, ETA: 12.4min
Gen  69/150 ( 46.0%) | Best: 1.0000, Avg: 0.8625, Diversity: 0.0752 | Time: 10.4min, ETA: 12.2min
Gen  70/150 ( 46.7%) | Best: 1.0000, Avg: 0.8785, Diversity: 0.0769 | Time: 10.6min, ETA: 12.1min
Gen  71/150 ( 47.3%) | Best: 1.0000, Avg: 0.8974, Diversity: 0.0742 | Time: 10.7min, ETA: 11.9min
Gen  72/150 ( 48.0%) | Best: 1.0000, Avg: 0.8764, Diversity: 0.0740 | Time: 10.9min, ETA: 11.8min
Gen  73/150 ( 48.7%) | Best: 1.0000, Avg: 0.8753, Diversity: 0.0717 | Time: 11.0min, ETA: 11.6min
Gen  74/150 ( 49.3%) | Best: 1.0000, Avg: 0.8757, Diversity: 0.0783 | Time: 11.2min, ETA: 11.5min
Gen  75/150 ( 50.0%) | Best: 1.0000, Avg: 0.8638, Diversity: 0.0806 | Time: 11.3min, ETA: 11.3min
Gen  76/150 ( 50.7%) | Best: 1.0000, Avg: 0.8823, Diversity: 0.0797 | Time: 11.5min, ETA: 11.2min
Gen  77/150 ( 51.3%) | Best: 1.0000, Avg: 0.8698, Diversity: 0.0797 | Time: 11.6min, ETA: 11.0min
Traceback (most recent call last):
  File "/home/orenda/achal/Evolutionary-Algorithms-and-Machine-Learning/Assignment_1/src/ea_runner.py", line 633, in <module>
    main()
    ~~~~^^
  File "/home/orenda/achal/Evolutionary-Algorithms-and-Machine-Learning/Assignment_1/src/ea_runner.py", line 577, in main
    run_experiment(experiment, device=args.device, problems_to_run=problems_to_run, run_number=args.run)
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/orenda/achal/Evolutionary-Algorithms-and-Machine-Learning/Assignment_1/src/ea_runner.py", line 430, in run_experiment
    result = run_single_problem(
        problem_id, problem_config, experiment_config,
        device, max_workers, problem_dir, wandb_run, total_generation_count
    )
  File "/home/orenda/achal/Evolutionary-Algorithms-and-Machine-Learning/Assignment_1/src/ea_runner.py", line 238, in run_single_problem
    ea.run_evolution()
    ~~~~~~~~~~~~~~~~^^
  File "/home/orenda/achal/Evolutionary-Algorithms-and-Machine-Learning/Assignment_1/src/progress_monitor.py", line 119, in enhanced_run_evolution
    fitness_scores = ea_instance.evaluate_fitness(ea_instance.population)
  File "/home/orenda/achal/Evolutionary-Algorithms-and-Machine-Learning/Assignment_1/src/rna_folding_ea.py", line 228, in evaluate_fitness
    fitness_scores = list(executor.map(evaluate_single, sequences))
  File "/home/orenda/miniconda3/lib/python3.13/concurrent/futures/_base.py", line 619, in result_iterator
    yield _result_or_cancel(fs.pop())
          ~~~~~~~~~~~~~~~~~^^^^^^^^^^
  File "/home/orenda/miniconda3/lib/python3.13/concurrent/futures/_base.py", line 317, in _result_or_cancel
    return fut.result(timeout)
           ~~~~~~~~~~^^^^^^^^^
  File "/home/orenda/miniconda3/lib/python3.13/concurrent/futures/_base.py", line 451, in result
    self._condition.wait(timeout)
    ~~~~~~~~~~~~~~~~~~~~^^^^^^^^^
  File "/home/orenda/miniconda3/lib/python3.13/threading.py", line 359, in wait
    waiter.acquire()
    ~~~~~~~~~~~~~~^^
KeyboardInterrupt
