Initialized wandb tracking: odin_pop_300_gen_100_mut_020_problem_1.1_run001_20251013_060130
Added wandb logging callback to EA
Enhanced progress monitoring enabled
Progress monitoring enabled for 300 individuals, 100 generations
EA Progress Monitoring Started
==================================================
Starting evolution: 300 individuals, 100 generations
Using 28 parallel workers for fitness evaluation
Sequence constraint: GARMUWYMNKKSSGMUCCKCYAGCNCMMNGAGKNCWAUKSKRUNCGNMYCNMNSCKCNCNCKUKKSWSAACSSSAMCN
Structure constraint: ((((....))))....(((((.......)))))............(((((.......[[[[[[))))).]]]]]]...
Initializing population...
Initialized population with 300 individuals

Generation 1/100
Gen   1/100 (  1.0%) | Best: 0.6795, Avg: 0.3654, Diversity: 0.3301 | Time: 0.0min, ETA: calculating...

Generation 2/100
Gen   2/100 (  2.0%) | Best: 0.7308, Avg: 0.4439, Diversity: 0.3239 | Time: 0.1min, ETA: 3.9min

Generation 3/100
Gen   3/100 (  3.0%) | Best: 0.7308, Avg: 0.5006, Diversity: 0.3097 | Time: 0.1min, ETA: 3.8min

Generation 4/100
Gen   4/100 (  4.0%) | Best: 0.7564, Avg: 0.5307, Diversity: 0.2913 | Time: 0.2min, ETA: 3.7min

Generation 5/100
Gen   5/100 (  5.0%) | Best: 0.7564, Avg: 0.5578, Diversity: 0.2601 | Time: 0.2min, ETA: 3.7min

Generation 6/100
Gen   6/100 (  6.0%) | Best: 0.7692, Avg: 0.5693, Diversity: 0.2285 | Time: 0.2min, ETA: 3.7min

Generation 7/100
Gen   7/100 (  7.0%) | Best: 0.8333, Avg: 0.6040, Diversity: 0.2234 | Time: 0.3min, ETA: 3.7min

Generation 8/100
Gen   8/100 (  8.0%) | Best: 0.8718, Avg: 0.6351, Diversity: 0.1475 | Time: 0.3min, ETA: 3.7min

Generation 9/100
Gen   9/100 (  9.0%) | Best: 0.8718, Avg: 0.6482, Diversity: 0.1402 | Time: 0.4min, ETA: 3.6min

Generation 10/100
Gen  10/100 ( 10.0%) | Best: 0.8974, Avg: 0.6889, Diversity: 0.1213 | Time: 0.4min, ETA: 3.6min

Generation 11/100
Gen  11/100 ( 11.0%) | Best: 0.8974, Avg: 0.7058, Diversity: 0.1024 | Time: 0.4min, ETA: 3.6min

Generation 12/100
Gen  12/100 ( 12.0%) | Best: 0.8974, Avg: 0.7575, Diversity: 0.0565 | Time: 0.5min, ETA: 3.6min

Generation 13/100
Gen  13/100 ( 13.0%) | Best: 0.8974, Avg: 0.7525, Diversity: 0.0461 | Time: 0.5min, ETA: 3.6min

Generation 14/100
Gen  14/100 ( 14.0%) | Best: 0.8974, Avg: 0.7573, Diversity: 0.0530 | Time: 0.6min, ETA: 3.6min

Generation 15/100
Gen  15/100 ( 15.0%) | Best: 0.8974, Avg: 0.7746, Diversity: 0.0445 | Time: 0.6min, ETA: 3.6min

Generation 16/100
Gen  16/100 ( 16.0%) | Best: 0.8974, Avg: 0.7835, Diversity: 0.0363 | Time: 0.7min, ETA: 3.5min

Generation 17/100
Gen  17/100 ( 17.0%) | Best: 0.8974, Avg: 0.7937, Diversity: 0.0348 | Time: 0.7min, ETA: 3.4min

Generation 18/100
Gen  18/100 ( 18.0%) | Best: 0.8974, Avg: 0.7779, Diversity: 0.0369 | Time: 0.7min, ETA: 3.4min

Generation 19/100
Gen  19/100 ( 19.0%) | Best: 0.8974, Avg: 0.7956, Diversity: 0.0362 | Time: 0.8min, ETA: 3.3min

Generation 20/100
Gen  20/100 ( 20.0%) | Best: 0.8974, Avg: 0.8047, Diversity: 0.0366 | Time: 0.8min, ETA: 3.3min

Generation 21/100
Gen  21/100 ( 21.0%) | Best: 0.8974, Avg: 0.7956, Diversity: 0.0377 | Time: 0.9min, ETA: 3.2min

Generation 22/100
Gen  22/100 ( 22.0%) | Best: 0.8974, Avg: 0.7993, Diversity: 0.0381 | Time: 0.9min, ETA: 3.2min

Generation 23/100
Gen  23/100 ( 23.0%) | Best: 0.8974, Avg: 0.7993, Diversity: 0.0371 | Time: 0.9min, ETA: 3.1min

Generation 24/100
Gen  24/100 ( 24.0%) | Best: 0.8974, Avg: 0.7719, Diversity: 0.0384 | Time: 1.0min, ETA: 3.1min

Generation 25/100
Gen  25/100 ( 25.0%) | Best: 0.8974, Avg: 0.7875, Diversity: 0.0382 | Time: 1.0min, ETA: 3.0min

Generation 26/100
Gen  26/100 ( 26.0%) | Best: 0.8974, Avg: 0.8076, Diversity: 0.0335 | Time: 1.0min, ETA: 3.0min

Generation 27/100
Gen  27/100 ( 27.0%) | Best: 0.8974, Avg: 0.8098, Diversity: 0.0337 | Time: 1.1min, ETA: 2.9min

Generation 28/100
Gen  28/100 ( 28.0%) | Best: 0.8974, Avg: 0.8005, Diversity: 0.0333 | Time: 1.1min, ETA: 2.9min

Generation 29/100
Gen  29/100 ( 29.0%) | Best: 0.8974, Avg: 0.8066, Diversity: 0.0339 | Time: 1.2min, ETA: 2.8min

Generation 30/100
Gen  30/100 ( 30.0%) | Best: 0.8974, Avg: 0.7898, Diversity: 0.0385 | Time: 1.2min, ETA: 2.8min

Generation 31/100
Gen  31/100 ( 31.0%) | Best: 0.8974, Avg: 0.7983, Diversity: 0.0349 | Time: 1.2min, ETA: 2.8min

Generation 32/100
Gen  32/100 ( 32.0%) | Best: 0.8974, Avg: 0.7908, Diversity: 0.0364 | Time: 1.3min, ETA: 2.7min

Generation 33/100
Gen  33/100 ( 33.0%) | Best: 0.8974, Avg: 0.7872, Diversity: 0.0375 | Time: 1.3min, ETA: 2.7min

Generation 34/100
Gen  34/100 ( 34.0%) | Best: 0.8974, Avg: 0.7786, Diversity: 0.0391 | Time: 1.4min, ETA: 2.6min

Generation 35/100
Gen  35/100 ( 35.0%) | Best: 0.8974, Avg: 0.7854, Diversity: 0.0379 | Time: 1.4min, ETA: 2.6min

Generation 36/100
Gen  36/100 ( 36.0%) | Best: 0.8974, Avg: 0.7917, Diversity: 0.0385 | Time: 1.4min, ETA: 2.6min

Generation 37/100
Gen  37/100 ( 37.0%) | Best: 0.8974, Avg: 0.7720, Diversity: 0.0392 | Time: 1.5min, ETA: 2.5min

Generation 38/100
Gen  38/100 ( 38.0%) | Best: 0.8974, Avg: 0.7894, Diversity: 0.0368 | Time: 1.5min, ETA: 2.5min

Generation 39/100
Gen  39/100 ( 39.0%) | Best: 0.8974, Avg: 0.7955, Diversity: 0.0374 | Time: 1.6min, ETA: 2.4min

Generation 40/100
Gen  40/100 ( 40.0%) | Best: 0.8974, Avg: 0.7954, Diversity: 0.0377 | Time: 1.6min, ETA: 2.4min

Generation 41/100
Gen  41/100 ( 41.0%) | Best: 0.8974, Avg: 0.7777, Diversity: 0.0438 | Time: 1.6min, ETA: 2.3min

Generation 42/100
Gen  42/100 ( 42.0%) | Best: 0.8974, Avg: 0.7739, Diversity: 0.0414 | Time: 1.7min, ETA: 2.3min

Generation 43/100
Gen  43/100 ( 43.0%) | Best: 0.8974, Avg: 0.7957, Diversity: 0.0346 | Time: 1.7min, ETA: 2.3min

Generation 44/100
Gen  44/100 ( 44.0%) | Best: 0.8974, Avg: 0.7893, Diversity: 0.0356 | Time: 1.8min, ETA: 2.2min

Generation 45/100
Gen  45/100 ( 45.0%) | Best: 0.8974, Avg: 0.7815, Diversity: 0.0376 | Time: 1.8min, ETA: 2.2min

Generation 46/100
Gen  46/100 ( 46.0%) | Best: 0.8974, Avg: 0.7992, Diversity: 0.0352 | Time: 1.8min, ETA: 2.1min

Generation 47/100
Gen  47/100 ( 47.0%) | Best: 0.8974, Avg: 0.7905, Diversity: 0.0371 | Time: 1.9min, ETA: 2.1min

Generation 48/100
Gen  48/100 ( 48.0%) | Best: 0.8974, Avg: 0.7833, Diversity: 0.0437 | Time: 1.9min, ETA: 2.1min

Generation 49/100
Gen  49/100 ( 49.0%) | Best: 0.8974, Avg: 0.7985, Diversity: 0.0396 | Time: 1.9min, ETA: 2.0min

Generation 50/100
Gen  50/100 ( 50.0%) | Best: 0.8974, Avg: 0.8006, Diversity: 0.0373 | Time: 2.0min, ETA: 2.0min

Generation 51/100
Gen  51/100 ( 51.0%) | Best: 0.8974, Avg: 0.7953, Diversity: 0.0376 | Time: 2.0min, ETA: 1.9min

Generation 52/100
Gen  52/100 ( 52.0%) | Best: 0.8974, Avg: 0.7809, Diversity: 0.0373 | Time: 2.1min, ETA: 1.9min

Generation 53/100
Gen  53/100 ( 53.0%) | Best: 0.8974, Avg: 0.8023, Diversity: 0.0386 | Time: 2.1min, ETA: 1.9min

Generation 54/100
Gen  54/100 ( 54.0%) | Best: 0.8974, Avg: 0.7947, Diversity: 0.0372 | Time: 2.1min, ETA: 1.8min

Generation 55/100
Gen  55/100 ( 55.0%) | Best: 0.8974, Avg: 0.7993, Diversity: 0.0346 | Time: 2.2min, ETA: 1.8min

Generation 56/100
Gen  56/100 ( 56.0%) | Best: 0.8974, Avg: 0.7970, Diversity: 0.0363 | Time: 2.2min, ETA: 1.7min

Generation 57/100
Gen  57/100 ( 57.0%) | Best: 0.8974, Avg: 0.7902, Diversity: 0.0382 | Time: 2.3min, ETA: 1.7min

Generation 58/100
Gen  58/100 ( 58.0%) | Best: 0.8974, Avg: 0.8051, Diversity: 0.0359 | Time: 2.3min, ETA: 1.7min

Generation 59/100
Gen  59/100 ( 59.0%) | Best: 0.8974, Avg: 0.7893, Diversity: 0.0402 | Time: 2.3min, ETA: 1.6min

Generation 60/100
Gen  60/100 ( 60.0%) | Best: 0.8974, Avg: 0.8024, Diversity: 0.0372 | Time: 2.4min, ETA: 1.6min

Generation 61/100
Gen  61/100 ( 61.0%) | Best: 0.8974, Avg: 0.7868, Diversity: 0.0400 | Time: 2.4min, ETA: 1.5min

Generation 62/100
Gen  62/100 ( 62.0%) | Best: 0.8974, Avg: 0.7947, Diversity: 0.0381 | Time: 2.4min, ETA: 1.5min

Generation 63/100
Gen  63/100 ( 63.0%) | Best: 0.8974, Avg: 0.7840, Diversity: 0.0399 | Time: 2.5min, ETA: 1.5min

Generation 64/100
Gen  64/100 ( 64.0%) | Best: 0.8974, Avg: 0.7839, Diversity: 0.0383 | Time: 2.5min, ETA: 1.4min

Generation 65/100
Gen  65/100 ( 65.0%) | Best: 0.8974, Avg: 0.7953, Diversity: 0.0352 | Time: 2.6min, ETA: 1.4min

Generation 66/100
Gen  66/100 ( 66.0%) | Best: 0.8974, Avg: 0.7838, Diversity: 0.0370 | Time: 2.6min, ETA: 1.3min

Generation 67/100
Gen  67/100 ( 67.0%) | Best: 0.8974, Avg: 0.7994, Diversity: 0.0381 | Time: 2.6min, ETA: 1.3min

Generation 68/100
Gen  68/100 ( 68.0%) | Best: 0.8974, Avg: 0.7780, Diversity: 0.0422 | Time: 2.7min, ETA: 1.3min

Generation 69/100
Gen  69/100 ( 69.0%) | Best: 0.8974, Avg: 0.7803, Diversity: 0.0395 | Time: 2.7min, ETA: 1.2min

Generation 70/100
Gen  70/100 ( 70.0%) | Best: 0.8974, Avg: 0.7834, Diversity: 0.0413 | Time: 2.8min, ETA: 1.2min

Generation 71/100
Error folding sequence GAACUUUCGUUCGGAUCCUCCAGCACACGGAGGCCUAUGGUGUCCGCCCCUCCCCUCUCGCGUUGCUCAACGCCACCG: Command '['sudo', 'docker', 'exec', 'ipknot_runner', 'ipknot', '/work/tmpsg871uef.fa']' died with <Signals.SIGINT: 2>.
Error folding sequence GAACUUCAGUUCGGAUCCUCCAGCACAAGGAGGCCAAUGGGGUCCGCAUCUCCCCUCUCGCGUUGCUCAACGCCACCG: Command '['sudo', 'docker', 'cp', '/tmp/tmpbaukziq5.fa', 'ipknot_runner:/work/tmpbaukziq5.fa']' returned non-zero exit status 130.
Traceback (most recent call last):
  File "/home/odin/achal/Evolutionary-Algorithms-and-Machine-Learning/Assignment_1/src/ea_runner.py", line 734, in <module>
    main()
  File "/home/odin/achal/Evolutionary-Algorithms-and-Machine-Learning/Assignment_1/src/ea_runner.py", line 678, in main
    run_experiment(experiment, device=args.device, problems_to_run=problems_to_run, run_number=args.run, enable_wandb=enable_wandb)
  File "/home/odin/achal/Evolutionary-Algorithms-and-Machine-Learning/Assignment_1/src/ea_runner.py", line 579, in run_experiment
    result = run_single_problem(
             ^^^^^^^^^^^^^^^^^^^
  File "/home/odin/achal/Evolutionary-Algorithms-and-Machine-Learning/Assignment_1/src/ea_runner.py", line 411, in run_single_problem
    ea.run_evolution()
  File "/home/odin/achal/Evolutionary-Algorithms-and-Machine-Learning/Assignment_1/src/progress_monitor.py", line 123, in enhanced_run_evolution
    # Start monitoring
  File "/home/odin/achal/Evolutionary-Algorithms-and-Machine-Learning/Assignment_1/src/rna_folding_ea.py", line 383, in run_evolution
    fitness_scores = self.evaluate_fitness(self.population)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/odin/achal/Evolutionary-Algorithms-and-Machine-Learning/Assignment_1/src/rna_folding_ea.py", line 237, in evaluate_fitness
    fitness_scores = list(executor.map(evaluate_single, sequences))
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/concurrent/futures/_base.py", line 619, in result_iterator
    yield _result_or_cancel(fs.pop())
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/concurrent/futures/_base.py", line 317, in _result_or_cancel
    return fut.result(timeout)
           ^^^^^^^^^^^^^^^^^^^
  File "/usr/lib/python3.12/concurrent/futures/_base.py", line 451, in result
    self._condition.wait(timeout)
  File "/usr/lib/python3.12/threading.py", line 355, in wait
    waiter.acquire()
KeyboardInterrupt
